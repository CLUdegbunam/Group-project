AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to deploy a lambda which is triggered by an S3 event.

Parameters:
  NamePrefix:
    Type: String
    Description: Prefix to be used for creating uniquely named resources

Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ScopePermissions
      #PermissionsBoundary: !Sub arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${NamePrefix}-etl-lambda
   

      Runtime: python3.9
      Timeout: 5
      Handler: app.lambda_function.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code: .deployment/lambda-package.zip
        
       

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${NamePrefix}-cafe-data
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     - Event: s3:ObjectCreated:*
      #       Function: !GetAtt LambdaFunction.Arn

  # S3BucketPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     Action: lambda:InvokeFunction
  #     FunctionName: !Ref LambdaFunction
  #     Principal: s3.amazonaws.com
  #     SourceArn: !GetAtt S3Bucket.Arn
